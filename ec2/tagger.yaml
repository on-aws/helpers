Description: >
  This template is to implement EBS volume tagging.
  Should be retired as soon as native support implemented by AWS.
  More information https://lightthief.io/engineering/ebs-tagging/

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
      Policies:
        - PolicyName: !Ref AWS::StackName
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:Describe*
                  - ec2:CreateTags
                Resource: '*'

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs12.x
      Code:
        ZipFile: !Sub |
          'use strict';
          const AWS = require('aws-sdk');
          const ec2 = new AWS.EC2();
          exports.handler = async (event) => {
            const { Reservations } = await ec2.describeInstances({InstanceIds: [event.detail['instance-id']]}).promise();
            const tags = Reservations[0].Instances[0].Tags;
            const volumes = Reservations[0].Instances[0].BlockDeviceMappings;
            console.log(JSON.stringify(tags));
            console.log(JSON.stringify(volumes));
            console.log({
              Resources: [volumes[0].VolumeId],
              Tags: tags.filter(t => t.Key.indexOf(':') === -1)
            });
            return ec2.createTags({
              Resources: [volumes[0].Ebs.VolumeId],
              Tags: tags.filter(t => t.Key.indexOf(':') === -1)
            }).promise();
          };

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Lambda}
      RetentionInDays: 7

  Ec2Events:
    Type: AWS::Events::Rule
    Properties:
      Description: Monitor EC2 events
      EventPattern:
        source:
          - aws.ec2
        detail:
          state:
            - running
      State: ENABLED
      Targets:
        -
          Arn: !GetAtt Lambda.Arn
          Id: !Ref AWS::StackName

  EventsInvokeTaggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      FunctionName: !GetAtt Lambda.Arn
